generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp()]
}

enum Role {
  admin
  user
}

enum InventoryMovementType {
  IN
  OUT
  ADJ
}

enum SalesOrderStatus {
  OPEN
  CONFIRMED
  IN_PRODUCTION
  READY
  DELIVERED
  PAID
  CANCELLED
}

enum SalesPaymentMethod {
  PIX
  CASH
  CARD
}

enum PaymentMethod {
  PIX
  CASH
  CARD
  BOLETO
}

enum CashbookType {
  IN
  OUT
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(user)
  totpSecret   String?  @db.VarChar(128)
  mustReset    Boolean  @default(false)
  createdAt    DateTime @default(now())
  auditLogs    AuditLog[]
  backupCodes  TotpBackupCode[]

  @@index([createdAt])
}

model Customer {
  id        String        @id @default(uuid())
  name      String
  phone     String?
  address   String?
  createdAt DateTime      @default(now())
  orders    SalesOrder[]

  @@index([createdAt])
}

model Product {
  id           String             @id @default(uuid())
  name         String
  category     String
  unitPrice    Decimal            @db.Decimal(12, 2)
  active       Boolean            @default(true)
  createdAt    DateTime           @default(now())
  recipe       Recipe?
  batches      ProductionBatch[]
  orderItems   SalesOrderItem[]

  @@index([name])
  @@index([category])
}

model Ingredient {
  id          String               @id @default(uuid())
  name        String
  unit        String
  unitCost    Decimal              @db.Decimal(12, 4)
  minStock    Decimal              @db.Decimal(12, 3)
  createdAt   DateTime             @default(now())
  recipeItems RecipeItem[]
  movements   InventoryMovement[]

  @@index([name])
}

model Recipe {
  id         String      @id @default(uuid())
  productId  String      @unique
  yieldUnits Int
  notes      String?
  product    Product     @relation(fields: [productId], references: [id])
  items      RecipeItem[]
}

model RecipeItem {
  id            String      @id @default(uuid())
  recipeId      String
  ingredientId  String
  qtyPerBatch   Decimal     @db.Decimal(12, 3)
  unit          String
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])

  @@index([recipeId])
  @@index([ingredientId])
}

model ProductionBatch {
  id           String      @id @default(uuid())
  productId    String
  plannedUnits Int
  actualUnits  Int?
  startedAt    DateTime    @default(now())
  finishedAt   DateTime?
  notes        String?
  product      Product     @relation(fields: [productId], references: [id])

  @@index([startedAt])
  @@index([finishedAt])
}

model InventoryMovement {
  id           String                 @id @default(uuid())
  ingredientId String
  type         InventoryMovementType
  qty          Decimal                @db.Decimal(12, 3)
  unitCost     Decimal?               @db.Decimal(12, 4)
  reason       String
  createdAt    DateTime               @default(now())
  ingredient   Ingredient             @relation(fields: [ingredientId], references: [id])

  @@index([ingredientId, createdAt])
  @@index([createdAt])
}

model SalesOrder {
  id            String            @id @default(uuid())
  customerId    String
  orderDate     DateTime
  dueDate       DateTime?
  status        SalesOrderStatus  @default(OPEN)
  paymentMethod SalesPaymentMethod?
  totalGross    Decimal           @db.Decimal(12, 2)
  totalDiscount Decimal           @db.Decimal(12, 2)
  totalNet      Decimal           @db.Decimal(12, 2)
  createdAt     DateTime          @default(now())
  customer      Customer          @relation(fields: [customerId], references: [id])
  items         SalesOrderItem[]
  cashbook      Cashbook[]

  @@index([orderDate])
  @@index([status])
  @@index([createdAt])
}

model SalesOrderItem {
  id         String     @id @default(uuid())
  orderId    String
  productId  String
  qty        Decimal    @db.Decimal(12, 3)
  unitPrice  Decimal    @db.Decimal(12, 2)
  total      Decimal    @db.Decimal(12, 2)
  order      SalesOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Expense {
  id            String         @id @default(uuid())
  date          DateTime
  category      String
  description   String
  amount        Decimal        @db.Decimal(12, 2)
  paymentMethod PaymentMethod
  createdAt     DateTime       @default(now())
  cashbook      Cashbook[]

  @@index([date])
  @@index([category])
}

model Cashbook {
  id            String        @id @default(uuid())
  date          DateTime
  type          CashbookType
  description   String
  amount        Decimal       @db.Decimal(12, 2)
  paymentMethod PaymentMethod
  refTable      String?
  refId         String?
  orderId       String?
  expenseId     String?
  createdAt     DateTime      @default(now())
  order         SalesOrder?   @relation(fields: [orderId], references: [id])
  expense       Expense?      @relation(fields: [expenseId], references: [id])

  @@index([date])
  @@index([type])
  @@index([paymentMethod])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entity     String
  entityId   String
  payloadJson Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([createdAt])
}

model OverheadConfig {
  id             String   @id @default(uuid())
  periodStart    DateTime
  periodEnd      DateTime
  gasCost        Decimal  @db.Decimal(12, 2)
  energyCost     Decimal  @db.Decimal(12, 2)
  waterCost      Decimal  @db.Decimal(12, 2)
  packagingCost  Decimal  @db.Decimal(12, 2)
  otherCost      Decimal  @db.Decimal(12, 2) @default(0)
  unitsProduced  Int
  createdAt      DateTime @default(now())

  @@index([periodEnd])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model TotpBackupCode {
  id        String   @id @default(uuid())
  userId    String
  codeHash  String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
